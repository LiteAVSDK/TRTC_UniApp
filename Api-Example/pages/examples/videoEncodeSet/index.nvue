<template>
	<div class="trtc-container">
		<view class="trtc-video-area">
			<view class="trtc-video-view" id='root'>
				<trtc-local-view :viewId="userId" style="height: 403.84rpx;flex: 1;"></trtc-local-view>
			</view>
			<view class="trtc-video-view">
				<trtc-remote-view v-if="remoteUserId" :userId="remoteUserId" :viewId="remoteUserId" style="height: 403.84rpx;flex: 1">
				</trtc-remote-view>
			</view>
		</view>
		<view class="trtc-title-container">
			<text class="trtc-title-text" style="text-align: center;">Local Preview</text>
			<text class="trtc-title-text" style="text-align: center;">Remote View</text>
		</view>

		<view class="trtc-row-area">
			<text class="trtc-title-text">roomId</text>
			<input type="text">
			<input class="trtc-input" style="width: 182.69rpx;" type="number" auto-blur=true :value="roomId"
				@input="bindInputChange($event, 'roomId')" />
			<text class="trtc-title-text">userId</text>
			<input class="trtc-input" style="width: 182.69rpx;" auto-blur=true :value="userId"
				@input="bindInputChange($event, 'userId')" />
		</view>

		<view class="trtc-encode-area">
			<view class="uni-form-item uni-column">
				<picker @change="e => selectChange('RESOLUTION', e)" :value="resolutionIndex" :range="TRTCVideoResolutionList">
					<label style="margin-left: 12px;">分辨率选择：{{TRTCVideoResolutionList[resolutionIndex]}}</label>
				</picker>
				<picker @change="e => selectChange('RESOLUTION_MODE', e)" :value="resolutionModeIndex" :range="TRTCVideoResolutionModeList">
					<label style="margin-left: 12px;">分辨率模式选择：{{TRTCVideoResolutionModeList[resolutionModeIndex]}}</label>
				</picker>
				<picker @change="e => selectChange('FPS', e)" :value="videoFpsIndex" :range="TRTCVideoFpsList">
					<label style="margin-left: 12px;">视频帧率选择：{{TRTCVideoFpsList[videoFpsIndex]}}</label>
				</picker>
				<picker @change="e => selectChange('BIT_RATE', e)" :value="videoBitrateIndex" :range="TRTCVideoBitrateList">
					<label style="margin-left: 12px;">视频帧率选择：{{TRTCVideoBitrateList[videoBitrateIndex]}}</label>
				</picker>
			</view>
		</view>

		<view class="trtc-line"></view>
		<button class="trtc-btn-long" style="margin-top: 20rpx;" type="primary" @click="enterRoom">Enter Room</button>
    <button class="trtc-btn-long" style="margin-top: 20rpx;" type="primary" @click="startLocalPreview">Start Local Preview</button>
		<button class="trtc-btn-long" style="margin-top: 20rpx;" type="primary" @click="setVideoEncoderParam">Set Encode Param</button>
		<button class="trtc-btn-long" style="margin-top: 20rpx;" type="primary" @click="exitRoom">Exit Room</button>
		<button class="trtc-btn-long" type="primary" @click="destroyInstance">Destroy TrtcCloud</button>
	</div>
</template>

<script>
	import permision from "@/TrtcCloud/permission.js";
	import TrtcCloud from '@/TrtcCloud/lib/index';
	import { TRTCAppScene, TRTCVideoStreamType, TRTCVideoResolution, TRTCVideoResolutionMode, TRTCVideoEncParam } from '@/TrtcCloud/lib/TrtcDefines';
	import genTestUserSig from '@/debug/GenerateTestUserSig';
	import TrtcLocalView from '@/TrtcCloud/view/TrtcLocalView';
	import TrtcRemoteView from '@/TrtcCloud/view/TrtcRemoteView';
	const roomId = Math.floor(Math.random() * 100000).toString();
	const userId = 'user_' + Math.floor(Math.random() * 100000).toString();

	export default {
		components: {
			TrtcLocalView: TrtcLocalView,
			TrtcRemoteView: TrtcRemoteView,
		},
		data() {
			return {
				trtcCloud: null,
				sdkAppId: 0,
				userSig: '',
				roomId: Math.floor(Math.random() * 100000),
				userId: 'user_' + Math.floor(Math.random() * 100000).toString(),
				appScene: TRTCAppScene.TRTCAppSceneVideoCall, // TRTCAppSceneVideoCall
				isFrontCamera: true,
				streamType: TRTCVideoStreamType.TRTCVideoStreamTypeBig,
				remoteUserId: '',
				TRTCVideoResolutionObject: {
					'120*120': TRTCVideoResolution.TRTCVideoResolution_120_120,
					'160*1160': TRTCVideoResolution.TRTCVideoResolution_160_160,
					'270*270': TRTCVideoResolution.TRTCVideoResolution_270_270,
					'480*480': TRTCVideoResolution.TRTCVideoResolution_480_480,
					'160*120': TRTCVideoResolution.TRTCVideoResolution_160_120,
					'240*180': TRTCVideoResolution.TRTCVideoResolution_240_180,
					'280*210': TRTCVideoResolution.TRTCVideoResolution_280_210,
					'320*240': TRTCVideoResolution.TRTCVideoResolution_320_240,
					'400*300': TRTCVideoResolution.TRTCVideoResolution_400_300,
					'480*360': TRTCVideoResolution.TRTCVideoResolution_480_360,
					'640*480': TRTCVideoResolution.TRTCVideoResolution_640_480,
					'960*720': TRTCVideoResolution.TRTCVideoResolution_960_720,
					'160*90': TRTCVideoResolution.TRTCVideoResolution_160_90,
					'256*144': TRTCVideoResolution.TRTCVideoResolution_256_144,
					'320*180': TRTCVideoResolution.TRTCVideoResolution_320_180,
					'480*270': TRTCVideoResolution.TRTCVideoResolution_480_270,
					'640*360': TRTCVideoResolution.TRTCVideoResolution_640_360,
					'960*540': TRTCVideoResolution.TRTCVideoResolution_960_540,
					'1280*720': TRTCVideoResolution.TRTCVideoResolution_1280_720,
					'1920*1080': TRTCVideoResolution.TRTCVideoResolution_1920_1080,
				},
				resolutionIndex: 10,
				TRTCVideoResolutionList: [],
				// TRTCVideoResolutionModeLandscape = 0 横屏分辨率; TRTCVideoResolutionModePortrait = 1 竖屏分辨率
				resolutionModeIndex: 0,
				TRTCVideoResolutionModeList: [TRTCVideoResolutionMode.TRTCVideoResolutionModeLandscape, TRTCVideoResolutionMode.TRTCVideoResolutionModePortrait],
				// 视频帧率: 15fps 或 20fps
				videoFpsIndex: 0,
				TRTCVideoFpsList: [15, 20], // 15fps或20fps。5fps以下，卡顿感明显。10fps以下，会有轻微卡顿感。20fps以上，会浪费带宽（电影的帧率为24fps）
				// 视频码率
				videoBitrateIndex: 0,
				TRTCVideoBitrateList: [900, 1200],
			}
		},
		mounted() {
			this.TRTCVideoResolutionList = Object.keys(this.TRTCVideoResolutionObject);
			if (uni.getSystemInfoSync().platform === 'android') {
				permision.requestAndroidPermission('android.permission.RECORD_AUDIO');
				permision.requestAndroidPermission('android.permission.CAMERA');
			}

			// 生成 userSig
			const { sdkAppId, userSig } = genTestUserSig(this.userId);
			this.sdkAppId = sdkAppId;
			this.userSig = userSig;
			if (!sdkAppId || !userSig) {
				uni.showToast({
					title: '请填写 sdkAppId、userSig',
					icon: 'none'
				});
			}
		},
    unmounted() {
			this.handleUninstallEvents();
		},
		onUnload() {
			this.destroyInstance();
			console.log('- onUnload');
		},
		onBackPress() {
			this.destroyInstance();
		},
		methods: {
			selectChange(type, e) {
				console.log('picker 选择改变，携带值为 ', type, e.detail.value);
				switch (type) {
					case 'RESOLUTION': {
						this.resolutionIndex = e.detail.value;
						break;
					}
					case 'RESOLUTION_MODE': {
						this.resolutionModeIndex = e.detail.value;
						break;
					}
					case 'FPS': {
						this.videoFpsIndex = e.detail.value;
						break;
					}
					case 'BIT_RATE': {
						this.videoBitrateIndex = e.detail.value;
						break;
					}
				}
			},
			bindInputChange(event, type) {
				const value = event.detail.value;
				switch (type) {
					case 'roomId': {
						this.roomId = value;
						break;
					}
					case 'userId': {
						this.userId = value;
						break;
					}
				}
			},
			destroyInstance() {
				if (this.trtcCloud) {
					TrtcCloud.destroyInstance();
					this.trtcCloud = null;
					uni.showToast({
						title: '销毁实例',
						icon: 'none'
					});
				}
			},
			createTrtcCloud() {
				uni.showToast({
					title: '创建实例 ',
					icon: 'none',
				});
				this.trtcCloud = TrtcCloud.createInstance();
				this.handleEvents();
			},
			enterRoom() {
				try {
          // 【1】创建实例
          this.createTrtcCloud();
          // 【2】进房
					const { roomId, userId, sdkAppId, appScene, userSig } = this;
					let param = { roomId: +roomId, userId, sdkAppId, userSig };
					this.trtcCloud.enterRoom(param, appScene);
					uni.showToast({
						title: 'enterRoom ',
						icon: 'none',
					});
					// 【3】设置编码参数
					this.setVideoEncoderParam();
				} catch (error) {
					console.log(`enterRoom error = ${JSON.stringify(error)}`);
				}
			},
			exitRoom() {
				try {
					this.stopLocalPreview();
					this.stopRemoteView();
          this.stopLocalAudio();
					this.trtcCloud.exitRoom();
					this.handleUninstallEvents();
          this.remoteUserId = '';
				} catch (e) {
					// TODO handle the exception
				}
			},
      // 本地预览
			startLocalPreview() {
				this.trtcCloud.startLocalPreview(this.isFrontCamera, this.userId);
				uni.showToast({
					title: 'localPreview',
					icon: 'none',
				});
			},
			// 设备本地视频编码器参数
			setVideoEncoderParam() {
				const videoResolution = this.TRTCVideoResolutionObject[this.TRTCVideoResolutionList[this.resolutionIndex]];
				const videoResolutionMode = this.TRTCVideoResolutionModeList[this.resolutionModeIndex];
				const videoFps = this.TRTCVideoFpsList[this.videoFpsIndex];
				const videoBitrate = this.TRTCVideoBitrateList[this.videoBitrateIndex];
				console.warn('--- 分辨率 = ', videoResolution, videoResolutionMode, videoFps, videoBitrate);
				const param = new TRTCVideoEncParam(videoResolution, videoResolutionMode, videoFps, videoBitrate);
				this.trtcCloud.setVideoEncoderParam(param);
			},
			stopLocalPreview() {
				this.trtcCloud.stopLocalPreview();
			},
			stopRemoteView() {
				if (this.remoteUserId) {
					this.trtcCloud.stopRemoteView(this.remoteUserId, this.streamType);
				}
			},
			handleEvents() {
				this.trtcCloud.on('onWarning', (res) => {
					uni.showToast({
						title: `onWarning: ${JSON.stringify(res)}`,
						icon: 'none',
					});
				});
				this.trtcCloud.on('onError', (res) => {
					console.log('- onError: ', JSON.stringify(res));
					uni.showToast({
						title: `error: ${JSON.stringify(res)}`,
						icon: 'none',
					});
				});
				this.trtcCloud.on('onEnterRoom', (result) => {
					console.log(`- onEnterRoom = ${result}`);
					if (result > 0) {
						uni.showToast({
							title: `进房成功，耗时: ${result}ms`,
							icon: 'none',
						});
					} else {
						console.log(`enter room failed，error code = ${result}`);
					}
				});
				this.trtcCloud.on('onExitRoom', (reason) => {
					const reasonList = ['主动调用 exitRoom 退房', '被服务器踢出当前房间', '当前房间整个被解散'];
					uni.showToast({
						title: `退房 ${reasonList[reason]}`,
						icon: 'none',
						duration: 1000
					});
				});
				this.trtcCloud.on('onFirstVideoFrame', (res) => {
					console.log(`渲染的首帧画面响应 = ${JSON.stringify(res)}`);
				});
				this.trtcCloud.on('onRemoteUserEnterRoom', (userId) => {
					this.remoteUserId = userId;
					uni.showToast({
						title: `远端进房: userId = ${userId}`,
						icon: 'none',
					});
				});
				this.trtcCloud.on('onUserVideoAvailable', (res) => {
					const {
						userId,
						available
					} = res;
					if (userId && available) {
						this.remoteUserId = userId;
            this.trtcCloud.startRemoteView(this.remoteUserId, this.streamType, this.remoteUserId);
					}
				});
				this.trtcCloud.on('onStatistics', (res) => {
					// console.warn('--- onStatistics ', JSON.stringify(res));
				});
				this.trtcCloud.on('onUserVideoSizeChanged', (res) => {
					console.warn('--- onUserVideoSizeChanged ', JSON.stringify(res));
				});
			},
      handleUninstallEvents() {
				this.trtcCloud.off('*');
			}
		}
	}
</script>

<style>
	.radio-group-container {
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: space-around;
		margin-top: 16px;
		flex-wrap: wrap;
	}
	.item-container {
		width: 375rpx;
		display: flex;
		flex-direction: row;
		margin-bottom: 14rpx;
	}
	.trtc-encode-area {}
</style>
